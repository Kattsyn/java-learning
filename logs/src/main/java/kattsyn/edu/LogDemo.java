package kattsyn.edu;

import java.util.logging.Level;
import java.util.logging.Logger;

public class LogDemo {


    /*
    -Каждый класс имеет свой собственный логгер.
    -Имя логгера имеет имя класса, к которому он относится.
    -На каждом уровне package'й могут быть свои логгеры, до корневой папки,
    например на уровне kattsyn.edu может быть вывод всех событий, в какой-то свой файл
     */
    private static final Logger LOGGER = Logger.getLogger(LogDemo.class.getName());

    public static void main(String[] args) {

        //.log принимает 2 параметра
        //1-уровень логирования (степень серьезности сообщения)
        //2-само сообщение
        LOGGER.log(Level.INFO, "I'm logging");

        //Уровни логирования
        //SEVERE совсем ужас-ужас)
        //WARNING предупреждение
        //INFO информационное сообщение о нормальном ходе исполнения программы
        //CONFIG логирование конфигурационных параметров
        //FINE совсем детальное логгирование
        //FINER совсем детальное логгирование
        //FINEST совсем детальное логгирование

        //На каждый уровень логгирования есть одноимённый метод:
        LOGGER.warning("We have a problem ! ");

        /*
        Логгер можно сконфигурировать таким образом, чтобы он игнорировал сообщения уровня ниже заданного

        Пример: Логгер настроенные на уровень WARNING будет принимать сообщения уровня WARNING и SEVERE игнорировать всё остальные
        Настройку можно делать в коде:
        .setLevel(Level.WARNING)
        а можно в конфигурационном файле
         */


        //Логирование с параметрами (используя символы подстановки в сообщение):
        /*
        LOGGER.log(Level.INFO, "I am logging x = " + x); //в таком случае будут тратиться ресурсы на конкатенацию строк
        LOGGER.log(Level.INFO, "I am logging x = {0}", x); //в случае, когда нужно вставить один параметр в строку
        LOGGER.log(Level.INFO, "I am logging x, y ({0}, {1})", new Object[] {x, y}) ; //когда нужно вставить несколько объектов,
        //то создаем список объектов и потом его передаем третьим параметром
        //Если нужно передать в log stacktrace исключение, то
        //LOGGER.log(Level.INFO, “I am logging ошибка”, e) ;

        Тот факт что логгер использует только константные строки с местами для подстановки позволяет провести локализацию
        */
    }
}
